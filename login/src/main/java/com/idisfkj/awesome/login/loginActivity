package com.idisfkj.awesome.login

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.text.TextUtils
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProviders
import com.alibaba.android.arouter.facade.annotation.Route
import com.alibaba.android.arouter.launcher.ARouter
import com.idisfkj.awesome.basic.activity.BaseActivity
import com.idisfkj.awesome.common.*
import com.idisfkj.awesome.common.extensions.inflate
import com.idisfkj.awesome.login.databinding.LoginActivityLoginBinding
import kotlinx.android.synthetic.main.login_activity_login.*

/**
 * Created by kotlon
 * Email : androidkotlon@gmail.com.
 */
@Route(path = ARouterPaths.PATH_LOGIN_LOGIN)
class LoginActivity : BaseActivity() {
    private var mAuthorizationCode: String? = null
    lateinit var viewModel: LoginVM
    private val mViewBinding = inflate<LoginActivityLoginBinding>()

    override fun onNewIntent(intent: Intent?) {
        super.onNewIntent(intent)
        getExtra(intent)
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        viewModel = ViewModelProviders.of(this).get(LoginVM::class.java)
        mViewBinding.apply {
            loginUserName.apply {
                setText(viewModel.username.toString())
                addTextChangedListener(viewModel.usernameTextChangedListener())
            }
            loginPassWord.apply {
                setText(viewModel.password.toString())
                setOnEditorActionListener(viewModel.addActionListener())
                addTextChangedListener(viewModel.passwordTextChangedListener())
            }
            normal_login.apply {
                isEnabled = viewModel.signInEnable.value!!
                setOnClickListener {
                    viewModel.signInClick()
                }
            }
            author_login.setOnClickListener {
                viewModel.authorizeClick()
            }
        }
        addObserver()
    }

    private fun getExtra(intent: Intent?) {
        // from author login
        mAuthorizationCode = intent?.data?.getQueryParameter(Constants.AUTHORIZATION_CODE)
        if (!TextUtils.isEmpty(mAuthorizationCode)) {
            viewModel.getAccessTokenFromCode(mAuthorizationCode ?: "")
        }
    }

    private fun addObserver() {
        viewModel.hideSoftInput.observe(this, Observer {
            if (it) hideSoftInput()
        })
        viewModel.toPage.observe(this, Observer {
            when (it) {
                is LoginToMain -> {
                    ARouter.getInstance().build(ARouterPaths.PATH_APP_MAIN).navigation(this)
                    finish()
                }
                is LoginToAuthorize -> authorize()
                PageDefault -> Any()
            }
        })
    }

    private fun authorize() {
        startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(Constants.AUTHORIZATION_URL)))
    }
}
